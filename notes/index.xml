<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Notes on</title><link>https://aryana101a.github.io/digital_garden/notes/</link><description>Recent content in Notes on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://aryana101a.github.io/digital_garden/notes/index.xml" rel="self" type="application/rss+xml"/><item><title>Preview Changes</title><link>https://aryana101a.github.io/digital_garden/notes/preview-changes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aryana101a.github.io/digital_garden/notes/preview-changes/</guid><description>If you&amp;rsquo;d like to preview what your Quartz site looks like before deploying it to the internet, here&amp;rsquo;s exactly how to do that!</description></item><item><title/><link>https://aryana101a.github.io/digital_garden/notes/ip_op_method/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aryana101a.github.io/digital_garden/notes/ip_op_method/</guid><description>There is a method to draw recursive tree which is called Input-Output Method
Initially take OP as empty string &amp;quot;&amp;quot; No.</description></item><item><title/><link>https://aryana101a.github.io/digital_garden/notes/ip_op_method_structure.png/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aryana101a.github.io/digital_garden/notes/ip_op_method_structure.png/</guid><description/></item><item><title/><link>https://aryana101a.github.io/digital_garden/notes/linux_notes/LinuxNotes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aryana101a.github.io/digital_garden/notes/linux_notes/LinuxNotes/</guid><description>LFS101x LinuxFoundationX: LFS101x Introduction to Linux edx course notes
Last Updated: August 02, 2018 by Pepe Sandoval
Want to show support?</description></item><item><title>Base Condition - Induction - Hypothesis Method</title><link>https://aryana101a.github.io/digital_garden/notes/bc_induction_hypo_method/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aryana101a.github.io/digital_garden/notes/bc_induction_hypo_method/</guid><description>Lets understand this method with a question
Q. Print 1 to N numbers
Input: n
Output: 1 2 3 4 .</description></item><item><title>bittorrent</title><link>https://aryana101a.github.io/digital_garden/notes/bittorrent/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aryana101a.github.io/digital_garden/notes/bittorrent/</guid><description>Tracker A tracker is a special type of server that keeps track of seeders and leechers and helps efficient transmission and reassembly of the coppied file.</description></item><item><title>Callouts</title><link>https://aryana101a.github.io/digital_garden/notes/callouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aryana101a.github.io/digital_garden/notes/callouts/</guid><description>Callout support Quartz supports the same Admonition-callout syntax as Obsidian.
This includes
12 Distinct callout types (each with several aliases) Collapsable callouts See documentation on supported types and syntax here.</description></item><item><title>combination sum I</title><link>https://aryana101a.github.io/digital_garden/notes/combination_sum_I/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aryana101a.github.io/digital_garden/notes/combination_sum_I/</guid><description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 void csum(vector&amp;lt;int&amp;gt; ip, int index, int sum, vector&amp;lt;int&amp;gt; &amp;amp;op, vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; &amp;amp;res) { if (index == ip.</description></item><item><title>Computer Science</title><link>https://aryana101a.github.io/digital_garden/notes/computer_science/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aryana101a.github.io/digital_garden/notes/computer_science/</guid><description>[[notes/bittorrent|BitTorrent]] [[notes/os|Operating System]]</description></item><item><title>Configuration</title><link>https://aryana101a.github.io/digital_garden/notes/config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aryana101a.github.io/digital_garden/notes/config/</guid><description>Configuration Quartz is designed to be extremely configurable. You can find the bulk of the configuration scattered throughout the repository depending on how in-depth you&amp;rsquo;d like to get.</description></item><item><title>data science</title><link>https://aryana101a.github.io/digital_garden/notes/data_science/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aryana101a.github.io/digital_garden/notes/data_science/</guid><description/></item><item><title>Delete middle element of a stack</title><link>https://aryana101a.github.io/digital_garden/notes/delete_middle_element_of_a_stack/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aryana101a.github.io/digital_garden/notes/delete_middle_element_of_a_stack/</guid><description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 void solve(stack&amp;lt;int&amp;gt;&amp;amp;s, int mid){ if(s.</description></item><item><title>discrete_math</title><link>https://aryana101a.github.io/digital_garden/notes/discrete_math/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aryana101a.github.io/digital_garden/notes/discrete_math/</guid><description> [[notes/set_theory|Set Theory]]</description></item><item><title>generate parentheses</title><link>https://aryana101a.github.io/digital_garden/notes/generate_parentheses/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aryana101a.github.io/digital_garden/notes/generate_parentheses/</guid><description>Question: https://leetcode.com/problems/generate-parentheses/
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 void solve(int o, int c, string op, vector&amp;lt;string&amp;gt; &amp;amp;res) { if (o == 0 &amp;amp;&amp;amp; c == 0) { res.</description></item><item><title>Height of binary tree</title><link>https://aryana101a.github.io/digital_garden/notes/height_of_binary_tree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aryana101a.github.io/digital_garden/notes/height_of_binary_tree/</guid><description>Input: root node
Output: height of tree
Hypothesis Step 1. Take any possible input and write its output.
height(root) = height</description></item><item><title>insert</title><link>https://aryana101a.github.io/digital_garden/notes/insert/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aryana101a.github.io/digital_garden/notes/insert/</guid><description>Hypothesis Step 1. Take any possible input and write its output.
insert([0 1 5],2) = [0 1 2 5]
Step 2.</description></item><item><title>intro</title><link>https://aryana101a.github.io/digital_garden/notes/intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aryana101a.github.io/digital_garden/notes/intro/</guid><description>Important Terms Population(N) - A group of people with a common theme. Refers to every person.
Sample(n) - Refers to a small portion of population.</description></item><item><title>josephus problem</title><link>https://aryana101a.github.io/digital_garden/notes/josephus_problem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aryana101a.github.io/digital_garden/notes/josephus_problem/</guid><description>Question: https://leetcode.com/problems/find-the-winner-of-the-circular-game/
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 void solve(vector&amp;lt;int&amp;gt; ip, int i, int k, int &amp;amp;res) { if (ip.</description></item><item><title>Kth symbol in grammar</title><link>https://aryana101a.github.io/digital_garden/notes/kth_symbol_in_grammar/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aryana101a.github.io/digital_garden/notes/kth_symbol_in_grammar/</guid><description>Question: https://leetcode.com/problems/k-th-symbol-in-grammar/ Given n\k 1 2 3 4 5 6 7 8 1 0 2 0 1 3 0 1 1 0 4 0 1 1 0 1 0 0 1 Observation We can observe that:</description></item><item><title>notes</title><link>https://aryana101a.github.io/digital_garden/notes/notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aryana101a.github.io/digital_garden/notes/notes/</guid><description> [[notes/linux_notes/LinuxNotes|LinuxNotes]] [[notes/recursion|Recursion]] [[notes/discrete_math|Discrete Math]] [[notes/computer_science|Computer Science]] [[notes/data_science|Data Science]] [[notes/statistics|Statistics]]</description></item><item><title>Operating System</title><link>https://aryana101a.github.io/digital_garden/notes/os/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aryana101a.github.io/digital_garden/notes/os/</guid><description>Computer Organization ![[notes/Pasted image 20221006192146.png]]</description></item><item><title>patterns</title><link>https://aryana101a.github.io/digital_garden/notes/patterns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aryana101a.github.io/digital_garden/notes/patterns/</guid><description>1. Return count 1 2 3 4 5 6 7 8 9 10 11 f(){ base case supporting_case true return 1 false return 0 l=f() r=f() return l+r } eg: [[notes/perfect_sum_subsets|Perfect Sum Subsets]] 2.</description></item><item><title>perfect sum first</title><link>https://aryana101a.github.io/digital_garden/notes/perfect_sum_first/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aryana101a.github.io/digital_garden/notes/perfect_sum_first/</guid><description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 bool pSum(int ip[], int n, int op, int sum) { // cout&amp;lt;&amp;lt;op&amp;lt;&amp;lt;endl; if (n == 0) { if (op == sum) { return true; } else return false; } int op1 = op; int op2 = op; op2 += ip[n - 1]; if (pSum(ip, n - 1, op1, sum) == true) return true; if (pSum(ip, n - 1, op2, sum) == true) return true; return false; } bool perfectSum(int arr[], int n, int sum) { bool tf = pSum(arr, n, 0, sum); return tf; }</description></item><item><title>perfect sum subsets</title><link>https://aryana101a.github.io/digital_garden/notes/perfect_sum_subsets/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aryana101a.github.io/digital_garden/notes/perfect_sum_subsets/</guid><description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 int countSum(int ip[], int n, int op, int sum) { if (n == 0) { if (op == sum) { return 1; } else return 0; } int op1 = op; int op2 = op; op2 += ip[n - 1]; int l = countSum(ip, n - 1, op1, sum); int r = countSum(ip, n - 1, op2, sum); return l + r; } int perfectSum(int arr[], int n, int sum) { int count = countSum(arr, n, 0, sum); return count; }</description></item><item><title>permutation with cases</title><link>https://aryana101a.github.io/digital_garden/notes/permutation_with_cases/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aryana101a.github.io/digital_garden/notes/permutation_with_cases/</guid><description>Question: https://leetcode.com/problems/letter-case-permutation/ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 void solve(string ip, string op, vector&amp;lt;string&amp;gt; &amp;amp;res) { if (ip.</description></item><item><title>permutations with spaces</title><link>https://aryana101a.github.io/digital_garden/notes/permutations_with_spaces/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aryana101a.github.io/digital_garden/notes/permutations_with_spaces/</guid><description>Question: https://practice.geeksforgeeks.org/problems/permutation-with-spaces3627/1 ![[notes/images/permutation_with_spaces.excalidraw.svg]]
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 void solve(string ip,string op,vector&amp;lt;string&amp;gt;&amp;amp; res){ if(ip.</description></item><item><title>print n binary numbers having more ones than zeros</title><link>https://aryana101a.github.io/digital_garden/notes/print_n_binary_numbers_having_more_ones_than_zeros/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aryana101a.github.io/digital_garden/notes/print_n_binary_numbers_having_more_ones_than_zeros/</guid><description>Question: https://practice.geeksforgeeks.org/problems/print-n-bit-binary-numbers-having-more-1s-than-0s0252/1
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 void solve(int n, int z, int o, string op, vector&amp;lt;string&amp;gt; &amp;amp;res) { if (n == 0) { res.</description></item><item><title>recursion</title><link>https://aryana101a.github.io/digital_garden/notes/recursion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aryana101a.github.io/digital_garden/notes/recursion/</guid><description>Important Points We take some decision and, input gets smaller Recursive Problem = Choice + Decision Example - Subset Problem</description></item><item><title>Reverse a stack</title><link>https://aryana101a.github.io/digital_garden/notes/reverse_a_stack/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aryana101a.github.io/digital_garden/notes/reverse_a_stack/</guid><description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 void ins(stack&amp;lt;int&amp;gt; &amp;amp;St, int e) { if (St.</description></item><item><title>sampling</title><link>https://aryana101a.github.io/digital_garden/notes/sampling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aryana101a.github.io/digital_garden/notes/sampling/</guid><description>Sampling Frame - List of individuals from which a sample is actually selected. Undercoverage - Omitting members from the sampling frame.</description></item><item><title>Search</title><link>https://aryana101a.github.io/digital_garden/notes/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aryana101a.github.io/digital_garden/notes/search/</guid><description>Quartz supports two modes of searching through content.
Full-text Full-text search is the default in Quartz. It produces results that exactly match the search query.</description></item><item><title>Set Theory</title><link>https://aryana101a.github.io/digital_garden/notes/set_theory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aryana101a.github.io/digital_garden/notes/set_theory/</guid><description>Set A set is a collection of objects where order and repetition does not matter.
eg. B={1,3,4,7}
1 $\in$ B $\in$ -&amp;gt; element of 2$\notin$ B $\notin$ -&amp;gt; not an element of Subsets A $\subseteq$ B means A is a subset of B eg.</description></item><item><title>Sort an array</title><link>https://aryana101a.github.io/digital_garden/notes/sort_array/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aryana101a.github.io/digital_garden/notes/sort_array/</guid><description>Input: array
Output: sorted array
Hypothesis Step 1. Take any possible input and write its output.
sort([1 5 0 2]) = [0 1 2 5]</description></item><item><title>statistics</title><link>https://aryana101a.github.io/digital_garden/notes/statistics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aryana101a.github.io/digital_garden/notes/statistics/</guid><description> [[notes/intro|Intro]] [[notes/sampling|Sampling]]</description></item><item><title>subset trivia</title><link>https://aryana101a.github.io/digital_garden/notes/subset_trivia/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aryana101a.github.io/digital_garden/notes/subset_trivia/</guid><description>Print all subsets = Print Powerset= Print all subsequence Q Print unique subsets eg.</description></item><item><title>Subsets</title><link>https://aryana101a.github.io/digital_garden/notes/subsets/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aryana101a.github.io/digital_garden/notes/subsets/</guid><description>![[notes/images/ip_op_example.excalidraw.svg]]
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 void solve(vector&amp;lt;int&amp;gt; ip,vector&amp;lt;int&amp;gt; op,vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; res){ if(ip.</description></item><item><title>Tower of Hanoi</title><link>https://aryana101a.github.io/digital_garden/notes/tower_of_hanoi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aryana101a.github.io/digital_garden/notes/tower_of_hanoi/</guid><description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 long long c=0; void solve(int N, int from, int to, int aux,long long &amp;amp;c) { c++; if(N==1){ cout&amp;lt;&amp;lt;&amp;#34;move disk &amp;#34;&amp;lt;&amp;lt;N&amp;lt;&amp;lt;&amp;#34; from rod &amp;#34;&amp;lt;&amp;lt;from&amp;lt;&amp;lt;&amp;#34; to rod &amp;#34;&amp;lt;&amp;lt;to&amp;lt;&amp;lt;endl; return; } toh(N-1,from,aux,to);//n-1 disks ko rod 1 se 2 pe, kyuki nth waali sabse badi disk hai, uske liye 3rd rod chordenge cout&amp;lt;&amp;lt;&amp;#34;move disk &amp;#34;&amp;lt;&amp;lt;N&amp;lt;&amp;lt;&amp;#34; from rod &amp;#34;&amp;lt;&amp;lt;from&amp;lt;&amp;lt;&amp;#34; to rod &amp;#34;&amp;lt;&amp;lt;to&amp;lt;&amp;lt;endl;//nth disk ko 1 se 3 par toh(N-1,aux,to,from);//n-1 disks ko 2 se 3 } long long toh(int N, int from, int to, int aux) { solve(N,from,to,aux,c); return c; }</description></item><item><title>Updating</title><link>https://aryana101a.github.io/digital_garden/notes/updating/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aryana101a.github.io/digital_garden/notes/updating/</guid><description>Haven&amp;rsquo;t updated Quartz in a while and want all the cool new optimizations? On Unix/Mac systems you can run the following command for a one-line update!</description></item></channel></rss>