<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Notes on</title><link>https://aryana101a.github.io/digital_garden/notes/</link><description>Recent content in Notes on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://aryana101a.github.io/digital_garden/notes/index.xml" rel="self" type="application/rss+xml"/><item><title>Preview Changes</title><link>https://aryana101a.github.io/digital_garden/notes/preview-changes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aryana101a.github.io/digital_garden/notes/preview-changes/</guid><description>If you&amp;rsquo;d like to preview what your Quartz site looks like before deploying it to the internet, here&amp;rsquo;s exactly how to do that!</description></item><item><title/><link>https://aryana101a.github.io/digital_garden/notes/ip_op_method/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aryana101a.github.io/digital_garden/notes/ip_op_method/</guid><description>There is a method to draw recursive tree which is called Input-Output Method
Initially take OP as empty string &amp;quot;&amp;quot; No.</description></item><item><title/><link>https://aryana101a.github.io/digital_garden/notes/ip_op_method_structure.png/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aryana101a.github.io/digital_garden/notes/ip_op_method_structure.png/</guid><description/></item><item><title/><link>https://aryana101a.github.io/digital_garden/notes/linux_notes/LinuxNotes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aryana101a.github.io/digital_garden/notes/linux_notes/LinuxNotes/</guid><description>LFS101x LinuxFoundationX: LFS101x Introduction to Linux edx course notes
Last Updated: August 02, 2018 by Pepe Sandoval
Want to show support?</description></item><item><title>Base Condition - Induction - Hypothesis Method</title><link>https://aryana101a.github.io/digital_garden/notes/bc_induction_hypo_method/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aryana101a.github.io/digital_garden/notes/bc_induction_hypo_method/</guid><description>Lets understand this method with a question
Q. Print 1 to N numbers
Input: n
Output: 1 2 3 4 .</description></item><item><title>Callouts</title><link>https://aryana101a.github.io/digital_garden/notes/callouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aryana101a.github.io/digital_garden/notes/callouts/</guid><description>Callout support Quartz supports the same Admonition-callout syntax as Obsidian.
This includes
12 Distinct callout types (each with several aliases) Collapsable callouts See documentation on supported types and syntax here.</description></item><item><title>Configuration</title><link>https://aryana101a.github.io/digital_garden/notes/config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aryana101a.github.io/digital_garden/notes/config/</guid><description>Configuration Quartz is designed to be extremely configurable. You can find the bulk of the configuration scattered throughout the repository depending on how in-depth you&amp;rsquo;d like to get.</description></item><item><title>Height of binary tree</title><link>https://aryana101a.github.io/digital_garden/notes/height_of_binary_tree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aryana101a.github.io/digital_garden/notes/height_of_binary_tree/</guid><description>Input: root node
Output: height of tree
Hypothesis Step 1. Take any possible input and write its output.
height(root) = height</description></item><item><title>insert</title><link>https://aryana101a.github.io/digital_garden/notes/insert/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aryana101a.github.io/digital_garden/notes/insert/</guid><description>Hypothesis Step 1. Take any possible input and write its output.
insert([0 1 5],2) = [0 1 2 5]
Step 2.</description></item><item><title>notes</title><link>https://aryana101a.github.io/digital_garden/notes/notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aryana101a.github.io/digital_garden/notes/notes/</guid><description> [[linux_notes/LinuxNotes|LinuxNotes]] [[recursion]]</description></item><item><title>recursion</title><link>https://aryana101a.github.io/digital_garden/notes/recursion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aryana101a.github.io/digital_garden/notes/recursion/</guid><description>Important Points We take some decision and, input gets smaller Recursive Problem = Choice + Decision Example - Subset Problem</description></item><item><title>Search</title><link>https://aryana101a.github.io/digital_garden/notes/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aryana101a.github.io/digital_garden/notes/search/</guid><description>Quartz supports two modes of searching through content.
Full-text Full-text search is the default in Quartz. It produces results that exactly match the search query.</description></item><item><title>Sort an array</title><link>https://aryana101a.github.io/digital_garden/notes/sort_array/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aryana101a.github.io/digital_garden/notes/sort_array/</guid><description>Input: array
Output: sorted array
Hypothesis Step 1. Take any possible input and write its output.
sort([1 5 0 2]) = [0 1 2 5]</description></item><item><title>Updating</title><link>https://aryana101a.github.io/digital_garden/notes/updating/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aryana101a.github.io/digital_garden/notes/updating/</guid><description>Haven&amp;rsquo;t updated Quartz in a while and want all the cool new optimizations? On Unix/Mac systems you can run the following command for a one-line update!</description></item></channel></rss>